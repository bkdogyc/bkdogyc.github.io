[{"categories":null,"content":"RocketMQ 順序消息坑一波 因應交易所業務，所有的交易消息需要有序進行，否則肯定會早成結算任務的異常狀態，但是以RocketMQ坑人的方式，經過各種測試總算解決問題。\n以下為各種測試經驗產生的結果。\nFirst try ：會不會是版本問題? 公司用的版本為4.7，也許版本有可能出問題，先考慮提升版本，畢竟MQ應該要有序消費應該不是難點，會有這種問題也許是版本產生的bug吧？\n將版本提升到5.2，你會發現一點用都沒有（笑。\nSecond try : 注意consumer必須要是order的方式 經由文件，我們在消費隊列的時候，必須要用順序的方式，以下列出方法(JAVA的網路範例)：\nconsumer.registerMessageListener(new MessageListenerOrderly() { @Override public ConsumeConcurrentlyStatus consumeMessage(List\u0026lt;MessageExt\u0026gt; msgs, ConsumeOrderlyContext context) { try { //模拟业务处理消息的时间 Thread.sleep(new Random().nextInt(1000)); System.out.println(new String(msgs.getBody(),\u0026#34;utf-8\u0026#34;)); } catch (Exception e) { e.printStackTrace(); } return ConsumeOrderlyStatus.SUCCESS; } }); 重點是MessageListenerOrderly，感覺應該更接近完成了。\n不過竟然要被稱為坑，就代表這件事情沒有想像的簡單，原本的code就是這樣了，所以可以得知這事情沒用。\nThird try : 那就是writeQueue和readQueue的數量問題？ 官方又隱晦地告訴你，你可以從code去鎖定寫入的queue為第一個，用來確保寫入的順序和讀取的順序，所以當我們的QUEUE變多的時候，事實上就會造成順序不正確！\n所以你可以換個思路就是：當開topic的時候，直接把這兩種queue直接設定為1個，這個情況下，就不用改CODE了！\n可想而知，沒錯！改了還是沒用！\nForth try : 會不會是consume的thread數量問題 當我們在消費信息的時候，由於會以多個thread的方式消費（可以參照套件），他會不斷的用不同的thread去消費內容，使信息能夠更快的進來，假設這個階段，產生的順序問題，是不是有可能產生順序問題呢？ 所以我們直接把消費的thread直接鎖死在1。很好，沒用，而且消費的速度還整個慢了。\nFifth try : 關閉auto create topic 好傢伙，這件事情官方沒有看到，因為當你的mq主機是以cluster來架設的情況下，這時候，自動建立的topic會為cluster topic。\n也就是說，這個topic會同時存在於多個broker中，經由上個實驗，你想到了什麼？ 就是不同broker，就算只有一個queue也等於有兩個以上的queue了，這時候豈不是亂序了？\n移除所有的topic，關閉autoCreateTopic，手動建立topic\nmqadmin updateTopic -c DefaultCluster -t FIFOTopic -o true -n 127.0.0.1:9876 -a +message.type=FIFO -t topic -c the cluster name\n-t the topic name\n-n the address of the nameserver\n-o the flag to create a ordered Topic\n好的！我們建立了一個5.x支援的FIFO的topic，並且關閉了autoCreateTopic，這個時候竟然就恢復正常了！\n結論 這中間經過了很多測試方案，一直都沒有辦法解決問題，經過上述的重點測試後，可以做以下的總結。\n當你做到以下的步驟，rocketMQ就會乖乖依照你的預期，順序性消費了。（沒必要去動消費的thread數量）\n不過再次同時，我也再次思考，那我何必使用cluster呢？一點效果沒有還要被坑！\nwritequeue和readqueue必須要為1 同時該topic必須要在一個broker中 消費的時候必須要用MessageListenerOrderly 必須要關閉autoCreateTopic 手動開啟topic的時候必須要指定FIFO topic ","permalink":"http://localhost:1313/posts/rocketmqpit/","tags":null,"title":"RocketmqPit"},{"categories":null,"content":"Hugo 專案啟動 隨著記憶力越來越差，越來越多的技術，用過之後就忘記了，由於沒有保留文件的習慣，很多東西都需要重新查詢，只有停留在有印象的情況。\n所以啟動hugo的筆記，記錄自己做過些什麼東西。\n安裝Hugo 安裝hugo指令，輸入command\nbrew intall hugo 建立site\nhugo new site BkDog 啟動測試(只是自己看看)\n# 啟動server hugo server # 草稿顯示模式 hugo server -D 需要注意的是，在hugo初期時，是沒有theme的，所以啟動時，一定會出現404 page not found，所以需要先安裝theme。 請到Theme 找一個喜歡的模板，自行安裝囉。\n安裝完成theme後，必須要hugo.toml的theme設定為自己的theme名稱，以我使用的tailwind來說，以下為內容範例。 其他設定請自行更改為需要的，因為挺簡單的就不贅述了。\nbaseURL = \u0026#34;https://example.com/\u0026#34; title = \u0026#34;Hugo Theme Tailwind Example Site\u0026#34; author = \u0026#34;BkDog\u0026#34; copyright = \u0026#34;BkDog\u0026#34; paginate = 10 languageCode = \u0026#34;en\u0026#34; theme = \u0026#34;tailwind\u0026#34; [params] # dir name of your blog content (default is `content/posts`). # the list of set content will show up on your index page (baseurl). contentTypeName = \u0026#34;posts\u0026#34; [params.header] logo = \u0026#34;0.jpg\u0026#34; [params.footer] since = 2024 poweredby = true [menu] [[menu.main]] identifier = \u0026#34;post\u0026#34; name = \u0026#34;Post\u0026#34; pageRef = \u0026#34;/posts\u0026#34; weight = 0 [[menu.main]] identifier = \u0026#34;about\u0026#34; name = \u0026#34;About\u0026#34; pageRef = \u0026#34;/about\u0026#34; weight = 10 [taxonomies] category = \u0026#34;categories\u0026#34; tag = \u0026#34;tags\u0026#34; series = \u0026#34;series\u0026#34; 增加新文章 執行新增文章指令 hugo new content posts/hugo.md 編輯hugo.md 注意表頭 當你帶有draft時，只是個草稿，不會在正常狀態下 +++ title = \u0026#39;Hugo\u0026#39; date = 2024-04-14T00:25:47+08:00 draft = true # 這行代表你只是個草稿 +++ 這裡就沒有其他需要注意的地方了。 發佈到github 建立一個“帳號名稱.github.io”的repository到github上。\n把hugo的public放置到這個repository中\nhugo git init git remote add origin https://github.com/帳號/帳號.github.io.git git add . git commit -m \u0026#34;first post\u0026#34; git push origin master 就能夠在https://帳號.github.io看到自己的頁面了\n","permalink":"http://localhost:1313/posts/hugo/","tags":null,"title":"Hugo"},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.es/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.fr/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.hi/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.jp/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.pl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.ru/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.zh-cn/","tags":null,"title":""}]